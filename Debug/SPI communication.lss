
SPI communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000935  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000695  00000000  00000000  00000bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000499  00000000  00000000  00001262  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  000016fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000465  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ad  00000000  00000000  00001c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001efa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "MCAL/SPI/SPI_interface.h"

int main(void)
{
	SPI_init();
  6c:	0e 94 68 00 	call	0xd0	; 0xd0 <SPI_init>
	
    while (1) 
    {
		SPI_masterTransmit('A');
  70:	81 e4       	ldi	r24, 0x41	; 65
  72:	0e 94 90 00 	call	0x120	; 0x120 <SPI_masterTransmit>
  76:	fc cf       	rjmp	.-8      	; 0x70 <main+0x4>

00000078 <GPIO_dir>:
}

uint8_t GPIO_dir(uint8_t u8_port, uint8_t u8_bit, uint8_t u8_mode)
{
	uint8_t* u8_reg;
	if (u8_port >= A && u8_port <= D)
  78:	8a 30       	cpi	r24, 0x0A	; 10
  7a:	20 f5       	brcc	.+72     	; 0xc4 <GPIO_dir+0x4c>
	{
		u8_reg = (uint8_t*)(GPIO_DIR_R - (u8_port -A));
  7c:	2a e3       	ldi	r18, 0x3A	; 58
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	f9 01       	movw	r30, r18
  82:	e8 1b       	sub	r30, r24
  84:	f1 09       	sbc	r31, r1
		if ( u8_bit >= LEAST_SIGNIFICANT_BIT && u8_bit <= MOST_SIGNIFICANT_BIT )
  86:	68 30       	cpi	r22, 0x08	; 8
  88:	f8 f4       	brcc	.+62     	; 0xc8 <GPIO_dir+0x50>
		{
			if (OUTPUT == u8_mode)
  8a:	41 30       	cpi	r20, 0x01	; 1
  8c:	61 f4       	brne	.+24     	; 0xa6 <GPIO_dir+0x2e>
			{
				GPIO_SET(u8_reg,u8_bit);	
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <GPIO_dir+0x20>
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	6a 95       	dec	r22
  9a:	e2 f7       	brpl	.-8      	; 0x94 <GPIO_dir+0x1c>
  9c:	90 81       	ld	r25, Z
  9e:	89 2b       	or	r24, r25
  a0:	80 83       	st	Z, r24
	}
	else 
	{
		return WRONG_PORT;
	}
	return NO_ERRORS;
  a2:	84 e0       	ldi	r24, 0x04	; 4
  a4:	08 95       	ret
		{
			if (OUTPUT == u8_mode)
			{
				GPIO_SET(u8_reg,u8_bit);	
			}
			else if (INPUT == u8_mode)
  a6:	41 11       	cpse	r20, r1
  a8:	11 c0       	rjmp	.+34     	; 0xcc <GPIO_dir+0x54>
			{
				GPIO_CLEAR(u8_reg,u8_bit);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_dir+0x3c>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_dir+0x38>
  b8:	80 95       	com	r24
  ba:	90 81       	ld	r25, Z
  bc:	89 23       	and	r24, r25
  be:	80 83       	st	Z, r24
	}
	else 
	{
		return WRONG_PORT;
	}
	return NO_ERRORS;
  c0:	84 e0       	ldi	r24, 0x04	; 4
  c2:	08 95       	ret
			return WRONG_PIN;
		}
	}
	else 
	{
		return WRONG_PORT;
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	08 95       	ret
				return WRONG_MODE;
			}
		}
		else
		{
			return WRONG_PIN;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	08 95       	ret
			{
				GPIO_CLEAR(u8_reg,u8_bit);
			}
			else
			{
				return WRONG_MODE;
  cc:	83 e0       	ldi	r24, 0x03	; 3
	else 
	{
		return WRONG_PORT;
	}
	return NO_ERRORS;
}
  ce:	08 95       	ret

000000d0 <SPI_init>:
#define PORTB_DIR  *((volatile uint8_t*) 0x37)
#define PORTB_DATA  *((volatile uint8_t*) 0x38)
void SPI_init(void){
	
	#if SPI_MODE == MASTER_MODE
	    GPIO_dir(B,SCK,OUTPUT);
  d0:	41 e0       	ldi	r20, 0x01	; 1
  d2:	67 e0       	ldi	r22, 0x07	; 7
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	0e 94 3c 00 	call	0x78	; 0x78 <GPIO_dir>
	    GPIO_dir(B,MOSI,OUTPUT);
  da:	41 e0       	ldi	r20, 0x01	; 1
  dc:	65 e0       	ldi	r22, 0x05	; 5
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	0e 94 3c 00 	call	0x78	; 0x78 <GPIO_dir>
		GPIO_dir(B,SS,OUTPUT);
  e4:	41 e0       	ldi	r20, 0x01	; 1
  e6:	64 e0       	ldi	r22, 0x04	; 4
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	0e 94 3c 00 	call	0x78	; 0x78 <GPIO_dir>
		PORTB_DATA |= (1 << SS);
  ee:	88 b3       	in	r24, 0x18	; 24
  f0:	80 61       	ori	r24, 0x10	; 16
  f2:	88 bb       	out	0x18, r24	; 24
	    SPC_R |= (1 << SPE) | (1 << MSTR);
  f4:	8d b1       	in	r24, 0x0d	; 13
  f6:	80 65       	ori	r24, 0x50	; 80
  f8:	8d b9       	out	0x0d, r24	; 13
	    #elif SCK_FREQ_PRESCALE == PRESCALER_4
	        SPC_R &= ~(1 << SPR0) & ~(1 << SPR1) & ~(1 << SPI2X);
	    #elif SCK_FREQ_PRESCALE == PRESCALER_8
	        SPC_R |= (1 << SPR0) | (1 << SPI2X);
	    #elif SCK_FREQ_PRESCALE == PRESCALER_16
	        SPC_R |= (1 << SPR0);
  fa:	8d b1       	in	r24, 0x0d	; 13
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	8d b9       	out	0x0d, r24	; 13
	    #endif
	
	    #if CLOCK_POLARITY == HIGH_WHEN_IDLE
	        SPC_R |= (1 << CPOL);
	    #elif CLOCK_POLARITY == LOW_WHEN_IDLE
	        SPC_R &= ~(1 << CPOL);
 100:	8d b1       	in	r24, 0x0d	; 13
 102:	87 7f       	andi	r24, 0xF7	; 247
 104:	8d b9       	out	0x0d, r24	; 13
	    #else
	        #error "Invalid Clock Polarity Setting"
	    #endif
	
	    #if DATA_SAMPLING == LEADING_EDGE
	        SPC_R &= ~(1 << CPHA);
 106:	8d b1       	in	r24, 0x0d	; 13
 108:	8b 7f       	andi	r24, 0xFB	; 251
 10a:	8d b9       	out	0x0d, r24	; 13
		
	#if SPI_INTERRUPT == ENABLE
		SPC_R    |= (1 << SPIE);
		STATUS_R |= (1 << GLOBAL_INTERRUPT);
	#elif SPI_INTERRUPT == DISABLE
	    SPC_R    &=	~(1 << SPIE);
 10c:	8d b1       	in	r24, 0x0d	; 13
 10e:	8f 77       	andi	r24, 0x7F	; 127
 110:	8d b9       	out	0x0d, r24	; 13
		STATUS_R &= ~(1 << GLOBAL_INTERRUPT);
 112:	8f b7       	in	r24, 0x3f	; 63
 114:	8f 77       	andi	r24, 0x7F	; 127
 116:	8f bf       	out	0x3f, r24	; 63
	#else 
	    #error "Invalid Interrupt Setting"
	#endif
	
	#if DATA_ORDER == MSB_FIRST
	    SPC_R &= ~(1 << DORD);
 118:	8d b1       	in	r24, 0x0d	; 13
 11a:	8f 7d       	andi	r24, 0xDF	; 223
 11c:	8d b9       	out	0x0d, r24	; 13
 11e:	08 95       	ret

00000120 <SPI_masterTransmit>:
	#endif
}

void SPI_masterTransmit(uint8_t u8_data){
	
	PORTB_DATA &= 0xEF;
 120:	98 b3       	in	r25, 0x18	; 24
 122:	9f 7e       	andi	r25, 0xEF	; 239
 124:	98 bb       	out	0x18, r25	; 24
	SPD_R = u8_data;
 126:	8f b9       	out	0x0f, r24	; 15
	while (!(SPS_R & (1 << SPIF)));
 128:	77 9b       	sbis	0x0e, 7	; 14
 12a:	fe cf       	rjmp	.-4      	; 0x128 <SPI_masterTransmit+0x8>
	PORTB_DATA |= 0x10;
 12c:	88 b3       	in	r24, 0x18	; 24
 12e:	80 61       	ori	r24, 0x10	; 16
 130:	88 bb       	out	0x18, r24	; 24
 132:	08 95       	ret

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
